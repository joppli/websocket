{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-09T16:49:33.468Z",
    "end": "2018-05-09T16:49:33.493Z",
    "duration": 25,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "dadf9280-cc92-4705-9c4b-9021000697ba",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "1ceb8953-e24a-4fed-9ab6-e8e0775c2a3e",
        "title": "codec tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expect guid to be the corect constant",
            "fullTitle": "codec tests expect guid to be the corect constant",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(Codec.GUID).to.be.equal('258EAFA5-E914-47DA-95CA-C5AB0DC85B11')",
            "err": {},
            "isRoot": false,
            "uuid": "6c307ded-6a22-48bb-bf8a-a8b3083e3ada",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to decode an encoded string",
            "fullTitle": "codec tests possible to decode an encoded string",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\noriginal = 'foobar',\nencoded  = Codec.encode(original)\nfor(const decoded of Codec.decode(encoded))\n{\n  expect(decoded.msg).to.be.equal(original)\n  done()\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e11005f8-842e-4c55-8138-b8c90497c939",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer is empty after processed complete message",
            "fullTitle": "codec tests buffer is empty after processed complete message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\noriginal = 'foobar',\nencoded  = Codec.encode(original)\nfor(const decoded of Codec.decode(encoded))\n{\n  expect(decoded.buffer.length).to.be.equal(0)\n  done()\n}",
            "err": {},
            "isRoot": false,
            "uuid": "2bf89873-d90e-4e50-b387-a126cfcc46a2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6c307ded-6a22-48bb-bf8a-a8b3083e3ada",
          "e11005f8-842e-4c55-8138-b8c90497c939",
          "2bf89873-d90e-4e50-b387-a126cfcc46a2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "31de1990-1c71-4025-a57c-1f24845ec190",
        "title": "server setup tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "possible for the server to listen to a port",
            "fullTitle": "server setup tests possible for the server to listen to a port",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const WebsocketServer = require('./server')\nserver = new WebsocketServer({ debug:false })\nserver.server.on('listening', done)\nserver.server.listen({ port:9001 })",
            "err": {},
            "isRoot": false,
            "uuid": "e4c5d080-849a-4358-ad1e-c53261aca392",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to close the server connection",
            "fullTitle": "server setup tests possible to close the server connection",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "server.server.on('close', done)\nserver.server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "ec78bf65-d67f-4d9b-830a-4a4dbec85cb3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e4c5d080-849a-4358-ad1e-c53261aca392",
          "ec78bf65-d67f-4d9b-830a-4a4dbec85cb3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f0f32aa0-d73a-47f2-afd8-348a88cde326",
        "title": "client setup tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "client setup tests \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "43a8a54d-4508-4119-a083-8f1dd92f5f9a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "possible for the client to connect to the server",
            "fullTitle": "client setup tests possible for the client to connect to the server",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nWebsocketClient = require('./client'),\nWebsocketServer = require('./server'),\nport = 9001\n// let\nclient = new WebsocketClient({ debug:false })\nserver = new WebsocketServer({ debug:false })\nserver.server.on('listening', async () =>\n{\n  await client.connect(port)\n  done()\n})\nserver.server.listen({ port })",
            "err": {},
            "isRoot": false,
            "uuid": "d85b740b-09de-4bda-97e7-a2f919196d88",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to close the client connection",
            "fullTitle": "client setup tests possible to close the client connection",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "client.socket.on('close', done)\nclient.socket.end()",
            "err": {},
            "isRoot": false,
            "uuid": "2097754c-77de-450f-867e-13a5b21aca89",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d85b740b-09de-4bda-97e7-a2f919196d88",
          "2097754c-77de-450f-867e-13a5b21aca89"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "82d1ef07-649b-40ef-895e-ea7bc7230620",
        "title": "integration tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "integration tests \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const\nWebsocketClient = require('./client'),\nWebsocketServer = require('./server'),\nport = 9001\n// let\nserver = new WebsocketServer({ debug:false })\nclient = new WebsocketClient({ debug:false })\nserver.server.listen({ port })\nserver.server.on('listening', async () =>\n{\n  await client.connect(port)\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4ac0bf6a-898d-4f5d-aa99-b3af4c8d6e2d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "integration tests \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.socket.end()\nserver.server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "d33df2e0-a5c5-41e6-adc6-4bc909c026a7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "possible to emit an event from the client to the server",
            "fullTitle": "integration tests possible to emit an event from the client to the server",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevt = 'foo',\ndto = 'bar'\nserver.events.on(evt, (ctx, data) =>\n{\n  expect(data).to.be.equal(dto)\n  done()\n})\nclient.emit(evt, dto)",
            "err": {},
            "isRoot": false,
            "uuid": "f7230327-4470-486d-9c0d-b9c8a2c7bcdf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to emit an event from the server to the client",
            "fullTitle": "integration tests possible to emit an event from the server to the client",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevt1 = 'foo',\nevt2 = 'bar',\ndto1 = 'baz',\ndto2 = 'qux'\nserver.events.on(evt1, (ctx, dto) =>\n{\n  expect(dto).to.be.equal(dto1)\n  ctx.emit(evt2, dto2)\n})\nclient.events.on(evt2, (dto) =>\n{\n  expect(dto).to.be.equal(dto2)\n  done()\n})\nclient.emit(evt1, dto1)",
            "err": {},
            "isRoot": false,
            "uuid": "a70d74be-8554-459c-95ee-9ab130e77fb9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f7230327-4470-486d-9c0d-b9c8a2c7bcdf",
          "a70d74be-8554-459c-95ee-9ab130e77fb9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}