{
  "stats": {
    "suites": 4,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-10T12:45:40.508Z",
    "end": "2018-05-10T12:45:40.582Z",
    "duration": 74,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "073cb228-cfc0-4007-afc2-b6a98cc83bf2",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b93c4569-2dc7-4756-a2d2-49ddda540d29",
        "title": "codec tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "expect guid to be the corect constant",
            "fullTitle": "codec tests expect guid to be the corect constant",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(Codec.GUID).to.be.equal('258EAFA5-E914-47DA-95CA-C5AB0DC85B11')",
            "err": {},
            "isRoot": false,
            "uuid": "4397eebb-1875-4a38-a56f-17e28a778498",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to decode an encoded string",
            "fullTitle": "codec tests possible to decode an encoded string",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\noriginal = 'foobar',\nencoded  = Codec.encode(original)\nfor(const decoded of Codec.decode(encoded))\n{\n  expect(decoded.msg).to.be.equal(original)\n  done()\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e1fb693f-955f-48fc-8575-ad2a38e7b823",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to decode an encoded string with mask",
            "fullTitle": "codec tests possible to decode an encoded string with mask",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\noriginal = 'foobar',\nmasked   = true,\nencoded  = Codec.encode(original, masked)\nfor(const decoded of Codec.decode(encoded))\n{\n  expect(decoded.msg).to.be.equal(original)\n  done()\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e4070124-bd54-4192-a137-6415db186185",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "buffer is empty after processed complete message",
            "fullTitle": "codec tests buffer is empty after processed complete message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\noriginal = 'foobar',\nencoded  = Codec.encode(original)\nfor(const decoded of Codec.decode(encoded))\n{\n  expect(decoded.buffer.length).to.be.equal(0)\n  done()\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fc6d3052-4cf8-47c7-81bc-3aedb2a57aab",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4397eebb-1875-4a38-a56f-17e28a778498",
          "e1fb693f-955f-48fc-8575-ad2a38e7b823",
          "e4070124-bd54-4192-a137-6415db186185",
          "fc6d3052-4cf8-47c7-81bc-3aedb2a57aab"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 8,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5067722f-744b-4658-8f29-b3a58a48e29f",
        "title": "server setup tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "possible for the server to listen to a port",
            "fullTitle": "server setup tests possible for the server to listen to a port",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const WebsocketServer = require('./server')\nserver = new WebsocketServer({ debug:false })\nserver.server.on('listening', done)\nserver.server.listen({ port:9001 })",
            "err": {},
            "isRoot": false,
            "uuid": "ffaa1fb8-e905-4479-af6f-65fcc823080d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to close the server connection",
            "fullTitle": "server setup tests possible to close the server connection",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "server.server.on('close', done)\nserver.server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "2dae6a0d-7833-44b3-9ea3-4485b0479c67",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ffaa1fb8-e905-4479-af6f-65fcc823080d",
          "2dae6a0d-7833-44b3-9ea3-4485b0479c67"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "367c6fd1-9b47-4102-8a10-d805fb5ec27d",
        "title": "client setup tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "client setup tests \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "8ca0d741-fbfe-48dd-a342-77fe39056871",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "possible for the client to connect to the server",
            "fullTitle": "client setup tests possible for the client to connect to the server",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nWebsocketClient = require('./client'),\nWebsocketServer = require('./server'),\nport = 9001\n// let\nclient = new WebsocketClient({ debug:false })\nserver = new WebsocketServer({ debug:false })\nserver.server.on('listening', async () =>\n{\n  await client.connect(port)\n  done()\n})\nserver.server.listen({ port })",
            "err": {},
            "isRoot": false,
            "uuid": "3761bcac-ada1-4b02-8d77-cebcbe6429a4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to close the client connection",
            "fullTitle": "client setup tests possible to close the client connection",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "client.socket.on('close', done)\nclient.socket.end()",
            "err": {},
            "isRoot": false,
            "uuid": "480247d9-902a-4961-85c1-9afa19a10a59",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "3761bcac-ada1-4b02-8d77-cebcbe6429a4",
          "480247d9-902a-4961-85c1-9afa19a10a59"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1fdc9411-fcaa-4088-b95f-879ed3823c18",
        "title": "integration tests",
        "fullFile": "/home/erik/Projects/@superhero/js.websocket/test.js",
        "file": "/test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "integration tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "const\nWebsocketClient = require('./client'),\nWebsocketServer = require('./server'),\nport = 9001\n// let\nserver = new WebsocketServer({ debug:false })\nclient = new WebsocketClient({ debug:false })\nserver.server.listen({ port })\nserver.server.on('listening', async () =>\n{\n  await client.connect(port)\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "67a8a40c-9633-4198-a8b5-15969143efb8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "integration tests \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "client.socket.end()\nserver.server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "58981672-a08e-4f19-9ffa-fcbf2e48eb91",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "not possible to emit an event that is not a string",
            "fullTitle": "integration tests not possible to emit an event that is not a string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(client.emit.bind(client, []  )).to.throw(TypeError)\nexpect(client.emit.bind(client, {}  )).to.throw(TypeError)\nexpect(client.emit.bind(client, 1234)).to.throw(TypeError)\nexpect(client.emit.bind(client, null)).to.throw(TypeError)",
            "err": {},
            "isRoot": false,
            "uuid": "200f5673-c706-4a2b-a62b-4f12892a2fca",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to emit an event from the client to the server",
            "fullTitle": "integration tests possible to emit an event from the client to the server",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevt = 'foo',\ndto = 'bar'\nserver.events.on(evt, (ctx, data) =>\n{\n  expect(data).to.be.equal(dto)\n  done()\n})\nclient.emit(evt, dto)",
            "err": {},
            "isRoot": false,
            "uuid": "1c7fafe5-a594-42f2-be52-3525e871a15b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to emit less then 125 char message",
            "fullTitle": "integration tests possible to emit less then 125 char message",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevt1 = 'foo',\nevt2 = 'bar',\ndto1 = 'baz',\ndto2 = 'qux'\nserver.events.on(evt1, (ctx, dto) =>\n{\n  expect(dto).to.be.equal(dto1)\n  ctx.emit(evt2, dto2)\n})\nclient.events.on(evt2, (dto) =>\n{\n  expect(dto).to.be.equal(dto2)\n  done()\n})\nclient.emit(evt1, dto1)",
            "err": {},
            "isRoot": false,
            "uuid": "77bbb4a4-f5a1-4da2-bfc8-365f7ee0bf12",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to emit a message larger then 125 and less then 65535",
            "fullTitle": "integration tests possible to emit a message larger then 125 and less then 65535",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevt1 = 'foo'.repeat(125),\nevt2 = 'bar'.repeat(125),\ndto1 = 'baz'.repeat(125),\ndto2 = 'qux'.repeat(125)\nserver.events.on(evt1, (ctx, dto) =>\n{\n  expect(dto).to.be.equal(dto1)\n  ctx.emit(evt2, dto2)\n})\nclient.events.on(evt2, (dto) =>\n{\n  expect(dto).to.be.equal(dto2)\n  done()\n})\nclient.emit(evt1, dto1)",
            "err": {},
            "isRoot": false,
            "uuid": "82918980-f29e-4066-b4d6-7fb09a7a3b17",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "possible to emit a message larger then 65535 chars",
            "fullTitle": "integration tests possible to emit a message larger then 65535 chars",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nevt1 = 'foo'.repeat(13107),\nevt2 = 'bar'.repeat(13107),\ndto1 = 'baz'.repeat(13107),\ndto2 = 'qux'.repeat(13107)\nserver.events.on(evt1, (ctx, dto) =>\n{\n  expect(dto).to.be.equal(dto1)\n  ctx.emit(evt2, dto2)\n})\nclient.events.on(evt2, (dto) =>\n{\n  expect(dto).to.be.equal(dto2)\n  done()\n})\nclient.emit(evt1, dto1)",
            "err": {},
            "isRoot": false,
            "uuid": "bfbc3b48-f010-4eb0-9c5a-7aedd267f8ac",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "200f5673-c706-4a2b-a62b-4f12892a2fca",
          "1c7fafe5-a594-42f2-be52-3525e871a15b",
          "77bbb4a4-f5a1-4da2-bfc8-365f7ee0bf12",
          "82918980-f29e-4066-b4d6-7fb09a7a3b17",
          "bfbc3b48-f010-4eb0-9c5a-7aedd267f8ac"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}